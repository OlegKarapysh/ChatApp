@page "/call/{ConversationId}"

@implements IAsyncDisposable

@inject IWebRtcService RtcService;
@inject IJSRuntime Js
@inject NavigationManager Navigation

<PageTitle>Video call</PageTitle>

<div class="py-4">
    <input id="channelInput" @bind="_channel" hidden/>
    <RadzenButton id="callButton" Click="CallAction" disabled="@_callDisabled">Ready</RadzenButton>
    <RadzenButton id="hangupButton" ButtonStyle="ButtonStyle.Danger" Click="HangupAction" disabled="@_hangupDisabled">Hang Up</RadzenButton>
</div>

<div class="container">
    <div class="row">
        <video class="col col-lg-6 p-0" id="localVideo" muted autoplay playsinline></video>
        <video class="col col-lg-6 p-0" id="remoteVideo" autoplay playsinline></video>
    </div>
</div>

@code {
    public const string Path = "/call";
    
    [Parameter]
    public string ConversationId { get; set; } = string.Empty;
    private IJSObjectReference _jsModule;
    private bool _callDisabled = true;
    private bool _hangupDisabled = true;
    private string _channel = "foo";

    protected override async Task OnInitializedAsync()
    {
        _channel = ConversationId;
        await base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await RtcService!.Hangup();
        RtcService.OnRemoteStreamAcquired -= RtcOnOnRemoteStreamAcquired;
        RtcService.InterlocutorLeft -= OnInterlocutorLeft;
        RtcService.Dispose();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await Js!.InvokeAsync<IJSObjectReference>("import", "./Pages/RtcPage.razor.js");
            RtcService!.OnRemoteStreamAcquired += RtcOnOnRemoteStreamAcquired;
            RtcService.InterlocutorLeft += OnInterlocutorLeft;
            await InitializeStreamAndChannel();
            //await CallAction();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task InitializeStreamAndChannel()
    {
        if (string.IsNullOrWhiteSpace(_channel)) return;
        
        await RtcService!.Join(_channel);
        var localMediaStream = await RtcService.StartLocalStream();
        await _jsModule.InvokeVoidAsync("setLocalStream", localMediaStream);
        _callDisabled = false;
        StateHasChanged();
    }

    private async void RtcOnOnRemoteStreamAcquired(object? _, IJSObjectReference e)
    {
        await _jsModule.InvokeVoidAsync("setRemoteStream", e);
        _callDisabled = true;
        _hangupDisabled = false;
        StateHasChanged();
    }

    private async Task CallAction()
    {
        _callDisabled = true;
        await RtcService!.Call();
        _hangupDisabled = false;
    }
    
    private async Task HangupAction()
    {
        await RtcService!.Hangup();
        Navigation!.NavigateTo(ChatsPage.Path);
    }

    private Task OnInterlocutorLeft(string conversationId)
    {
        return HangupAction();
    }
}