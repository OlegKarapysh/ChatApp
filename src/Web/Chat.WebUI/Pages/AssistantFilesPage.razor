@page "/ai-files/{GroupId}"

@attribute [Authorize]

@inject IGroupsWebApiService GroupService
@inject IToastService ToastService
@inject DialogService Dialog

<PageTitle>@GroupWithFilesDto.Name</PageTitle>

<h1>@($"{GroupWithFilesDto.Name} files")</h1>

<LinkComponent Path="@GroupsPage.Path" Text=" Go back to all groups"></LinkComponent>

<RadzenDataGrid TItem="AssistantFileDto" Data="GroupWithFilesDto.Files" AllowColumnResize="true" AllowAlternatingRows="false" 
                AllowFiltering="true" AllowPaging="true" PagerAlwaysVisible="false" PageSize="PageInfo.DefaultPageSize" Responsive="true">
    <HeaderTemplate>
        <RadzenButton Click="OpenFileUploadDialog">Upload file</RadzenButton>
    </HeaderTemplate>
    <EmptyTemplate>
        <NoResultsInGridComponent></NoResultsInGridComponent>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="AssistantFileDto" Property="@nameof(AssistantFileDto.Name)" Title="File name">
            <FooterTemplate>
                Total files: <strong>@FilesCount</strong>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="AssistantFileDto" Property="@nameof(AssistantFileDto.SizeInBytes)" Width="150px" Title="Size in bytes"/>
        <RadzenDataGridColumn TItem="AssistantFileDto" Property="@nameof(AssistantFileDto.CreatedAt)" Width="180px" Title="Uploaded at"/>
        <RadzenDataGridColumn TItem="AssistantFileDto" Title="Actions">
            <Template Context="fileInfo">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="async () => await DeleteFileAsync(fileInfo.Id)">
                    Delete
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code 
{
    public const string Path = "/ai-files";

    [Parameter]
    public string GroupId { get; set; } = string.Empty;
    public GroupWithFilesDto GroupWithFilesDto { get; set; } = new();
    public int FilesCount => GroupWithFilesDto.Files.Count;

    protected override async Task OnInitializedAsync()
    {
        await RefreshFilesGrid();
    }
    
    private async Task OpenFileUploadDialog()
    {
        bool? isUploaded = await Dialog!.OpenAsync<FileUploadFormComponent>(
            "New file", new Dictionary<string, object> {{ nameof(FileUploadFormComponent.GroupIdParameter), GroupId }})!;
        if (isUploaded is not null && (bool)isUploaded)
        {
            await RefreshFilesGrid();
        }
    }

    private async Task DeleteFileAsync(int fileId)
    {
        var deletionError = await GroupService!.DeleteFileFromGroupAsync(fileId, int.Parse(GroupId));
        if (deletionError is not null)
        {
            ToastService!.ShowError(deletionError.Message);
        }
        else
        {
            await RefreshFilesGrid();
        }
    }

    private async Task RefreshFilesGrid()
    {
        var response = await GroupService!.GetGroupWithFilesAsync(int.Parse(GroupId));
        if (response is { IsSuccessful: true, Content: not null })
        {
            GroupWithFilesDto = response.Content;
        }
        else
        {
            ToastService!.ShowError(response.ErrorDetails?.Message ?? "Failed to fetch group files");
        }
    }
}