@page "/messages"

@attribute [Authorize]

@inject IMessagesWebApiService MessageService
@inject IToastService ToastNotification
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

<h1>Messages</h1>

<RadzenTextBox Placeholder="Type to search..." @bind-Value="SearchFilter"></RadzenTextBox>
<RadzenDropDown TValue="string" Data="MessagesProperties" @bind-Value="SortingProperty" Change="OnSortingPropertyChanged">
</RadzenDropDown>
<RadzenRadioButtonList @bind-Value="SortingOrder" TValue="int" class="mb-5" Change="OnSortingOrderChanged">
    <Items>
        <RadzenRadioButtonListItem Text="Ascending" Value="1" />
        <RadzenRadioButtonListItem Text="Descending" Value="2" />
    </Items>
</RadzenRadioButtonList>
<RadzenButton Click="OnSearch">Search</RadzenButton>

<RadzenDataGrid TItem="MessageDto" Data="MessagesOnPage" ColumnWidth="300px"
                AllowColumnResize="true" AllowAlternatingRows="false">
    <Columns>
        <RadzenDataGridColumn TItem="MessageDto" Property="TextContent" Title="Text" />
        <RadzenDataGridColumn TItem="MessageDto" Property="CreatedAt" Title="Created at"/>
        <RadzenDataGridColumn TItem="MessageDto" Property="UpdatedAt" Title="Last updated at"/>
    </Columns>
</RadzenDataGrid>
<RadzenPager @ref="Pager" PageSize="@PageInfo.DefaultPageSize" PageNumbersCount="DefaultPageNumbersCount" 
             AlwaysVisible="true" Count="MessagesCount" PageChanged="OnPageChanged"></RadzenPager>

@code 
{
    public const string Path = "/messages";
    public const int DefaultPageNumbersCount = 3;
    
    [QueryStringParameter]
    public string SearchFilter { get; set; } = string.Empty;
    [QueryStringParameter]
    public int Page
    {
        get => _page;
        set => _page = value < 1 ? 1 : value;
    }
    [QueryStringParameter]
    public string SortingProperty { get; set; } = nameof(MessageDto.CreatedAt);
    [QueryStringParameter]
    public int SortingOrder { get; set; } = (int)Chat.Domain.Enums.SortingOrder.Ascending;
    
    public RadzenPager Pager { get; set; } = default!;
    public int MessagesCount { get; set; }
    public readonly string[] MessagesProperties = typeof(MessageDto)
        .GetProperties(BindingFlags.Public | BindingFlags.Instance)
        .Select(x => x.Name).ToArray();
    public IList<MessageDto> MessagesOnPage { get; set; } = new List<MessageDto>();
    private int _page;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(Navigation!);
        return base.SetParametersAsync(parameters);
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            var pageIndex = Page - 1;
            await Pager.GoToPage(pageIndex, true);
        }
    }

    private async Task OnSearch()
    {
        Page = 1;
        var pageIndex = Page - 1;
        await Pager.GoToPage(pageIndex, true);
        await UpdateQueryStringParameters();
    }

    private async Task OnSortingPropertyChanged()
    {
        await SendAndHandleSearchRequest();
        await UpdateQueryStringParameters();
    }

    private async Task OnSortingOrderChanged()
    {
        await SendAndHandleSearchRequest();
        await UpdateQueryStringParameters();
    }
    
    private async Task OnPageChanged(PagerEventArgs args)
    {
        UpdatePage(args.PageIndex);
        await SendAndHandleSearchRequest();
        await this.UpdateQueryString(Navigation!, JsRuntime!);
    }

    private void UpdatePagerItemsCount(PageInfo pageInfo)
    {
        MessagesCount = pageInfo.TotalCount;
    }
    
    private void UpdatePage(int pageIndex)
    {
        Page = pageIndex + 1;
    }

    private void UpdateConversations(MessageDto[] conversations)
    {
        MessagesOnPage = conversations;
    }

    private async Task UpdateQueryStringParameters()
    {
        await this.UpdateQueryString(Navigation!, JsRuntime!);
    }

    private async Task SendAndHandleSearchRequest()
    {
        var searchResult = await SendSearchRequest();
        if (!searchResult.IsSuccessful)
        {
            ToastNotification!.ShowError(searchResult.ErrorDetails!.Message);
        }
        else
        {
            UpdateConversations(searchResult.Content!.Messages);
            UpdatePagerItemsCount(searchResult.Content.PageInfo);
        }
    }

    private PagedSearchDto ParseQueryModel() => new()
    {
        Page = Page,
        SearchFilter = SearchFilter,
        SortingProperty = SortingProperty,
        SortingOrder = (Chat.Domain.Enums.SortingOrder)SortingOrder
    };

    private async Task<WebApiResponse<MessagesPageDto>> SendSearchRequest()
    {
        return await MessageService!.GetSearchedMessagesPage(ParseQueryModel());
    }
}