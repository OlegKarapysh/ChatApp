@page "/change-password"

@attribute [Authorize]
@inject NavigationManager Navigation
@inject IJwtAuthService AuthService
@inject INotificationService Notification
@layout AuthLayout

<div class="card col-md-6 offset-3">
    <div class="card-header">
        <h3 class="text-center fw-bold text-primary">Change password</h3>
    </div>
    <div class="card-body">
        <EditForm Model="@ChangePasswordData" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary style="color:indianred" Model="@ChangePasswordData" />

            <div class="form-group mt-2">
                <label for="Password" class="form-label">Password:</label>
                <InputText type="password" id="Password" @bind-Value="ChangePasswordData.CurrentPassword" class="form-control"></InputText>
                <ValidationMessage For="() => ChangePasswordData.CurrentPassword"></ValidationMessage>
            </div>
            
            <div class="form-group mt-2">
                <label for="NewPassword" class="form-label">New password:</label>
                <InputText type="password" id="NewPassword" @bind-Value="ChangePasswordData.NewPassword" class="form-control"></InputText>
                <ValidationMessage For="() => ChangePasswordData.NewPassword"></ValidationMessage>
            </div>

            <div class="form-group mt-2">
                <label for="ConfirmPassword" class="form-label">Repeat new password:</label>
                <InputText type="password" id="ConfirmPassword" @bind-Value="ChangePasswordData.RepeatNewPassword" class="form-control"></InputText>
                <ValidationMessage For="() => ChangePasswordData.RepeatNewPassword"></ValidationMessage>
            </div>

            <div class="form-group mt-2">
                <button class="btn btn-outline-primary float-end" disabled="@IsSubmitDisabled" type="submit">Change</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    public ChangePasswordDto ChangePasswordData { get; set; } = new();
    public bool IsSubmitDisabled = false;

    public async Task HandleSubmit()
    {
        IsSubmitDisabled = true;
        Console.WriteLine(ChangePasswordData.CurrentPassword);
        Console.WriteLine(ChangePasswordData.NewPassword);
        Console.WriteLine(ChangePasswordData.RepeatNewPassword);
        var changePasswordResult = await AuthService!.ChangePasswordAsync(ChangePasswordData);
        if (changePasswordResult is not null)
        {
            Console.WriteLine($"Error during changing password! {changePasswordResult.Message}");
            Notification!.ShowError(changePasswordResult.Message);
            IsSubmitDisabled = false;
        }
        else
        {
            Navigation!.NavigateTo("/");
        }
    }
}