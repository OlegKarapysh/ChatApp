@inject HubConnectionService HubConnectionService
@inject IConversationsWebApiService ConversationService

<ErrorBoundary @ref="ErrorBoundary">
    <ChildContent>
        <Spinner></Spinner>
        <CascadingAuthenticationState>
            <Router AppAssembly="@typeof(App).Assembly">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <NotAuthorized>
                            <h4>Not authorized.</h4>
                        </NotAuthorized>
                        <Authorizing>
                            <h4>Authentication in progress...</h4>
                        </Authorizing>
                    </AuthorizeRouteView>
                    <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
                </Found>
                <NotFound>
                    <PageTitle>Not found</PageTitle>
                    <LayoutView>
                        <p role="alert">Sorry, there's nothing at this address.</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingAuthenticationState>
        <BlazoredToasts Position="ToastPosition.BottomRight"
                        Timeout="10"
                        IconType="IconType.FontAwesome"
                        SuccessClass="success-toast-override"
                        SuccessIcon="fa fa-thumbs-up"
                        ErrorIcon="fa fa-bug"/>
    </ChildContent>
    <ErrorContent>
        <div class="card col-md-6 offset-3">
            <p>Oops, something went wrong...</p>
            <button @onclick="() => ErrorBoundary.Recover()">Reload</button>
        </div>
    </ErrorContent>
</ErrorBoundary>

@code 
{
    public ErrorBoundary ErrorBoundary { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var conversationIds = await ConversationService!.GetAllUserConversationIdsAsync();
        await HubConnectionService!.ConnectAsync();
        await HubConnectionService!.JoinConversationsAsync(
            conversationIds.Content?.Select(x => x.ToString()).ToArray() ?? Array.Empty<string>());
        await base.OnInitializedAsync();
    }
}
